syntax = "proto3";

package discovery;

import "./google/protobuf/empty.proto";

enum AgentStatus {
  UNKNOWN = 1;
  HEALTHY = 2;
  UNHEALTHY= 3;
  OFFLINE = 4;
}

message Agent {
  string id = 1;
  string address = 2;
  int32 port = 3;
  AgentStatus status = 4;
  string last_heartbeat = 5;
}

// `/register` - RegisterAgent
message RegisterAgentRequest {
  string id = 1;
  string address = 2;
  int32 port = 3;
}

message RegisterAgentResponse {
  bool success = 1;
  string message = 2;
}

// `/deregister/` - DeregisterAgent
message DeregisterAgentRequest {
  string id = 1;
}

message DeregisterAgentResponse {
  bool success = 1;
  string message = 2;
}

// `/heartbeat/` - Heartbeat
message HeartbeatRequest {
  string id = 1;
}

message HeartbeatResponse {
  bool success = 1;
  string message = 2;
}

// `/nodes/` - GetAgents
message GetAgentsRequest {}
message GetAgentsResponse {
  bool success = 1;
  string message = 2;
  repeated Agent nodes = 3;
}


// `/peers/` - GetPeers
message GetPeersRequest {
  string id = 1;
}
message GetPeersResponse {
  bool success = 1;
  string message = 2;
  repeated Agent peers = 3;
}


// `/nodes/status/` - GetAgentStatus
message GetAgentStatusRequest {
  string id = 1;
}
message GetAgentStatusResponse {
  bool success = 1;
  string message = 2;
  AgentStatus status = 3;
}

// `/update-metadata/` - UpdateAgentMetadata
message UpdateAgentMetadataRequest {
  string id = 1;
  string address = 2;
  int32 port = 3;
}
message UpdateAgentMetadataResponse {
  bool success = 1;
  string message = 2;
}

message TestMessage {
  string message = 1;
}

message Empty {}

service AgentDiscoveryService {
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  rpc DeregisterAgent(DeregisterAgentRequest) returns (DeregisterAgentResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  rpc GetAgents(GetAgentsRequest) returns (GetAgentsResponse);
  rpc GetPeers(GetPeersRequest) returns (GetPeersResponse);
  rpc GetAgentStatus(GetAgentStatusRequest) returns (GetAgentStatusResponse);
  rpc UpdateAgentMetadata(UpdateAgentMetadataRequest) returns (UpdateAgentMetadataResponse);
  rpc Test(Empty) returns (TestMessage);
}